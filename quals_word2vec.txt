positive samples:
0    -------    importerror cannot import name using pycharm profiler trying run pycharm profiler get following error message using conda environment switched terminal updated matplotlib six good measure note also manually deleted packages site directory environment reinstalled incase upgrade behaving looked neither solutions solved problem also switched pycharm run configurations use conda environments turn produce error note profiler worked past code works fine use normal way executing code anybody idea going thanks     ------   importerror cannot import name find solution one help try update matplotlib try reinstall matplotlib following snippet prints console 
0    -------    pycairo importerror dll load failed specified module could found even dlls installed following pycairo installation instructions install pycairo use igraph however even running installer unzipping copying dll site packages cairo directory according instructions still get following error import cairo traceback recent call last file line file c python lib site packages cairo init py line cairo import importerror dll load failed specified module could found running python windows ideas     ------   python v importerror dll load failed specified module could found used installer gave dll load error read install fltk well exactly install well reading found fltk pyd apparently missing libgcc dw dll libstdc dll dll dll fix try alternative installer 
0    -------    sending raw ip traffic python detect mtu implement manual mtu discovery python send ping target example use google dns server set df bit ping prevent ping fragmented set packet size large number standard mtu note ping implementations set size payload means account byte icmp header byte ip header     ------   find mtu value network code python write code need send data using udp protocol python need set packet size mtu value network way decide mtu value network writing code python answer taken page github gist providing functionality source 
0    -------    python multiprocessing barrier using python converting multithreaded code multiprocessing code avoid gil lock problems however see barrier implementation multiprocessing module ideas implement one saw question sure whether work correctly use locks thanks     ------   implementing barrier python code implemented python using barriers want get functionality python know synchronization primitive use barriers python simulate barrier semaphores take look problem timeout parameter maybe using conditions 
0    -------    embed python interpreter pyqt widget want able bring interactive python terminal python application variables program needs exposed interpreter currently use sub classed modified qplaintextedit route commands eval exec keep track separate namespace dict however got elegant robust way example want ipython pygtk currently many corner cases probably missed slow try large print loop got simpler less bug prone way hope def runcommand self function key understanding problem ideally want improve rather want replace content something simpler smarter functionality console myvar app myvar statement main also important     ------   embed python interpreter qt app straightforward way embed python interpreter qt application hoping cross platform solution possible purpose supports windows linux mac os 
0    -------    program report bazaar revision number run python program bazaar version control get program display current branch revision number date build date run program exported executed working copy tree svn version question     ------   getting svn revision number program automatically python project svn wanting display version number run way automatically running short script commit could update version file querying svn repository python sure python specifics put string revision file somewhere enable auto props true svn config get rewritten something like revision could parse script overhead e g querying svn repo string hard coded file commit update sure parse python php similar little pythonic php answer put module init py make sure add revision property 
0    -------    python libs parsing apache config files python libs parsing apache config files python anyone aware thing languages perl php java c able rewrite python     ------   python parsing apache config regexp want parse configuration files like apache conf looks like regexp use lazy regexp cuts like use greedy regexp cuts text correct way parse libraries way regexp alone regexp engine state parse simple input see options 
0    -------    execute javascript function python selenium function called code javascript see takes argument called code run returns char string found tested call argument functions javascript problem call code always get none return value far making since read unofficial selenium documentation said keep getting none printed call function passing parameter     ------   running javascript selenium using python totally new selenium want execute javascript snippet following code commented code please help use errors try browser execute script instead selenium see example use execute script python example 
0    -------    combining two matplotlib colormaps would like merge two colormaps one use one cmap negative values one positive values moment masked arrays plotting one image one cmap image resulting following data plotted pos gist heat r neg binary would like single colorbar combined cmap correct approach take two existing merge one edit admit duplicate answer given much clear also example images make clear     ------   two different color colormaps imshow matplotlib let suppose example want show values zero different colormap values zero first possible want use diverging colormap neutral zero diverging two distinct colours example really want use two different colormaps solution masked arrays 
0    -------    python pandas timestamps local time string daylight saving dataframe timestamps column want convert strings local time ie daylight saving want convert ts pandas seems aware dst call values series thanks     ------   determine timezone specific date past daylight saving python way check specific timezone daylight saving date specified call datetime datetime dst rel nofollow datetime dst method example equivalent 
negative samples:
29    -------    importerror module named filedialog pyinstaller written program tried turn executable using pyinstaller pyinstaller appears finished without errors end application dist program however try run application console window flashes second traceback edit copied traceback may mistake type screenshot flashes imports code anyone know whats causing fix presume error importation edit program runs fine run interpreter spyder packaged using pyinstaller resulting application gives error     ------   pyinstaller module named try compile python project windows using pyinstaller project works fine issues however try compile result work though get warnings compilation many txt file build directory really understand warnings example module named numpy pi since numpy pi module number never tried import numpy pi import numpy matplotlib explicitly addition using pyqt thought error might related libraries however able compile simple script uses numpy succesfully successfully means created executable file actually showed desired output however also txt file created contains exactly warnings one guess fact compiling actual project give success least related warnings else could error output compilation info none negative statement specify additional hook directory hooks using default directory far could read compile output e g hook matplotlib executed could see hook numpy neither could small example script one worked used following imports files different ones anyone know issue could related since pyinstaller give errors warnings could figure problem related libraries something else considered update suggestion compiled program without w redirected stdout stderr file executing program got following adding import tkinter beginning main file got finally added import filedialog program actually works problem runtime dependencies matplotlib compiling fine running program threw errors terminal closed immediately realize redirecting stdout stderr file could see missed libraries tkinter filedialog adding two imports top main solved problem similar problem module named filedialog discovered version could use pyinstaller hidden import filedialog instead modifying main script 
29    -------    numpy bits image data type cvtcolor conversion hsv colorspace converting image rgb hsv representation using cv cvtcolor converting resulting image np float dtype np uint np uint rescaling casting resulting images using cv imshow look different integer versions thus wondering done conversion correctly actually caused information lost conversion trying understand going figure sample images rel nofollow noreferrer result conversion rel nofollow noreferrer data print     ------   numpy bits images conversion bits images cvtcolor opencv testing based understanding reading documentation stumble upon source read scale bits bits one divide instead mentioned got post code trying play around would appreciate anyone able check done scaling correctly asking question mainly confirm whether supposed casting value disagree answer question link format uint represent values integers e integers cannot represented uint uint range therefore want bit images color levels intensity values images range read image format float need multiply values convert array uint good practice cast type end result last step operations perform mainly two reasons perform divisions multiplications float result return float need change type general mathematical sense term transformation float integer introduces errors casting type end operations prevents error propagation go back bit e color levels need multiply values reasoning holds bit images possible intensity values e values range number becoming big rather work bit images float format values contained range ps found code quite confusing go detail understanding bit format representation number possible intensity levels image key allow understand transformations images 
29    -------    requests stops multiple requests sent row parsing online shops using scrapy python requests get info making one request get qty python requests several minutes spider stops working dont know causing trouble suggestions scrapy log nothing happens console anymore function gets quantity     ------   log requests python requests module using python need debug oauth activity would like log requests performed could get information unfortunately possible grep https connections needed oauth activate logging urls parameters requests accessing need enable debugging httplib level requests urllib httplib functions toggle temporarily pre class lang python prettyprint override import logging import try http client import httpconnection py except importerror httplib import httpconnection py def debug requests switches logging requests module httpconnection logging logging getlogger setlevel logging debug requests log logging getlogger requests packages urllib requests log setlevel logging debug requests log propagate true def debug requests switches logging requests module might side effects httpconnection root logger logging getlogger root logger setlevel logging warning root logger handlers requests log logging getlogger requests packages urllib requests log setlevel logging warning requests log propagate false def debug requests use debug requests yield debug requests demo use see request including headers data response headers without data thing missing response body logged underlying urllib library logs new connections urls rel noreferrer logging module post bodies get requests enough gives verbose logging option see details configure logging levels destinations short demo following messages logged info new connections http https info dropped connections info redirects warn connection pool full happens often increase connection pool size warn retrying connection debug connection details method path http version status code response length 
29    -------    wsgi cgi plain english every time read either wsgi cgi cringe tried reading nothing really stuck really plain english pipe requests terminal redirect output     ------   python web frameworks wsgi cgi fit together account run python scripts cgi guess simplest cgi run define following htaccess whenever look web programming python hear lot wsgi frameworks use understand fits together especially web server given apache running host machine something really play except defining htaccess commands cgi frameworks connected need know install want run web framework say basic cgi configuration install wsgi support wsgi cgi frameworks connected apache listens port gets http request parses request find way respond apache lot choices responding one way respond use cgi run script another way respond simply serve file case cgi apache prepares environment invokes script cgi protocol standard unix fork exec situation cgi subprocess inherits os environment including socket stdout cgi subprocess writes response goes back apache apache sends response browser cgi primitive annoying mostly forks subprocess every request subprocess must exit close stdout stderr signify end response wsgi interface based cgi design pattern necessarily cgi fork subprocess request cgi wsgi adds cgi design pattern several important ways parses http request headers adds environment supplies post oriented input file like object environment also provides function formulate response saving lot formatting details need know install want run web framework say web py cherrypy basic cgi configuration recall forking subprocess expensive two ways work around embedded mod wsgi mod python embeds python inside apache process forked apache runs django application directly daemon mod wsgi mod fastcgi allows apache interact separate daemon long running process using wsgi protocol start long running django process configure apache mod fastcgi communicate process note mod wsgi work either mode embedded daemon read mod fastcgi see django uses create wsgi compatible interface information provided mod fastcgi pipeline works like django several django core handlers various interfaces mod fastcgi django provides manage py integrates flup handler mod wsgi core handler install wsgi support follow instructions background see think answers part question wsgi especially read questions pose towards end wsgi cgi fastcgi etc protocols web server run code deliver dynamic content produced compare static web serving plain html file basically delivered client cgi fastcgi language agnostic write cgi scripts perl python c bash whatever cgi defines executable called based url called arguments environment also defines return value passed back web server executable finished variations basically optimisations able handle requests reduce latency basic concept wsgi python rather language agnostic protocol standard function signature defined complete limited wsgi application web server wsgi support apache mod wsgi invoke function whenever request arrives reason great avoid messy step converting http get post cgi python back way much direct clean efficient linkage also makes much easier long running frameworks running behind web servers needs done request function call plain cgi individual request wsgi support need installed wsgi module like use web server wsgi baked like neither possible could use cgi wsgi bridge given pep 
29    -------    check float value whole number trying find largest cube root whole number less sure check whole number though could convert string use indexing check end values see whether zero seems rather cumbersome though simpler way     ------   numpy check float array contains whole numbers python possible check float contains integer value using n integer based qa numpy similar operation applied arrays something would allow following possible something like involve calling extra methods creating bunch temp arrays could potentially avoided numpy vectorized function checks fractional parts floats way similar python float integer needed answer question slightly different reason checking convert entire array floating point numbers integers without losing data answer almost works except obviously use place trick since need able undo operation thought following option probably faster many situations reason modulo operation slower subtraction however casting integers front know fast operation relatively speaking arrays integers case latter version almost certainly faster another benefit could replace something like rel nofollow noreferrer np check within certain tolerance course careful since truncation proper rounding edit slower perhaps worth depending use case also converting integers individually present example matters works sparse data means mostly zeros convert json reuse later server floats converts ints results saving half numbers characters string reduces overhead server shorter strings client shorter strings presumably slightly faster json parsing tell function returns boolean array indicating whether floats fractional part closest find np returns fractional integer parts creates two float arrays least temporarily might best memory wise happy working place try something like save memory versus using round floor keep x around course lose original x option ask implemented numpy implement 
29    -------    capturing emoticons using regular expression python would like regex pattern match smileys also capture repeated smileys like filter invalid syntax like matches maybe missing something obvious like help seemingly simple task     ------   find count emoticons string using python topic addressed text based emoticons however would like something slightly different matching simple emoticons sorting tweets contain emoticons icons following unicode information contains emoticons using string english words also contains emoticons would like able compare number emoticons number words direction heading seem best option looking help see script planning work command line py psuedo script problem running decoding encoding found good option encode decode string correctly find icons example string want search find number words emoticons follows smiley emoticon rocks like challenge make script counts number words emoticons string notice emoticons sitting next words space trying read unicode characters outside ascii range convert ascii range leave unicode work untested best solution work first need encode got unicode string engine handle unicode use include range characters specifying first last hyphen specify unicode characters know type u escape sequences string big enough building whole findall list seems wasteful counting words separately want use alternation group points python versions allowed narrow unicode builds example cpython windows builds narrow narrow builds characters range u u ffff way search characters ok exist search assume exist get invalid range error compiling regexp except course good chance wherever getting actual strings utf utf le characters exist encoded surrogate pairs want match surrogate pairs right need translate search surrogate pair search convert high low code points surrogate pair code units python terms search leave second condition last case worried accepting bogus utf obvious translates regexp example range u e u utf course range small enough low lead high lead gets simpler example original question range searched one last trick actually know whether going get utf le utf bom far away data searching surrogate lead trail code unit valid standalone character end pair search directions 
29    -------    importing python script another script running arguments python script packaged command line script py since ask running another python script want call script way import module artificially populate required arguments second script avoid changing code import initial script also takes arguments main h options yet worked get strange error mixture new script py bottom parameters correct could double set parameters confusing argparse     ------   importing python script module uses argparse another python script question may regarded redundant defense considered similar questions given solutions work understand show want wrote couple python scripts command line tools accepting several arguments using argparse built pyinstaller work expected within pycharm terminal ubuntu terminal would like scripts module could called another python script passing required arguments would terminal one original scripts shortened script bit serves minimal example said within ide pycharm ubuntu terminal works fine coming actual problem want script wc query test py module imported another python script executed passing along arguments command line achieve followed instructions code came wc query test py script imports module calls test py run python terminal get running wc query test py yields output see test running test py yields error well get idea work either cannot put words run method make sense would need modify code order obtain dual functionality described want thank advance help update got rid error message changed e g kwargs username kwargs get username since kwargs dictionary code looks like running python terminal yields expected building via pyinstaller running command line tool output modify wc query test py takes arguments serves command line tool kwargs passing dictionary keyword value pairs function args parser parse args returns argparse namespace object dictionary vars args produces dictionary pass args foo try foo pass expanded dictionary version thanks everyone responded help colleague got answer question functioning code wc query test py three ways executing wc query test wanted achive calling wc query test py command line compiling calling wc query test command line calling wc query test another python script goes direction module type usage three versions yield output expected example 
29    -------    difference type hinting keep hearing type hinting new feature makes wonder arrow indicator see found wondering type hinting exist limited fashion bringing major support understanding type hinting incorrect actually means something else     ------   python type hinting syntax work seen following example expected work python however works python unexpected really check types yet see following example runs throw exception seems name function function seems ignored seems true name type hinting syntax using something else like java modeling language makes use comments syntax introduced python way static type checking already syntax always break python compatibility type hinting going provide annotations introduced python support python let annotate arguments return values arbitrary information later inspection otherwise consulted instead error message got trying concatenate string integer values body function custom type error aimed providing additional information str int concatenation failed thrown str add method type str pep proposes make use annotations actual static type checking additional tools introduction pep states annotations available runtime usual annotations attribute type checking happens runtime instead proposal assumes existence separate line type checker users run source code voluntarily essentially type checker acts powerful linter emphasis original pep inspired existing tools use pep annotations specifically looping right back adopting pep also see guido van rossum well mypy apparently supports python preprocessing annotations removing byte compiling source code otherwise cannot normally use syntax python code meant work python pep also describes use sit next regular python files use extension contain signatures type hints leaving main py files annotation free thus usable python provided wrote polyglot python code otherwise 
29    -------    retrieve colorbar instance figure matplotlib want update colorbar figure imagedata changed something like seems returned results fig axes colorbar instance like expected probably pass colorbar instance argument update function thought passing one fig parameter may good enough anyone explain little bit retrieve colorbar figure fig axes return instance axes think need understanding axes figure stuff thank     ------   check colorbar exists figure question way check color bar already exists making many plots loop issue color bar drawn every iteration rel nofollow noreferrer could determine color bar exists put color bar function statement use multiprocessing make figures possible prevent multiple color bars added rel nofollow noreferrer realize clear figure plt clf plt cla plotting next iteration data basemap layer want plot adds time takes create plot could remove colorbar add new one save time actually easy remove colorbar plot later draw new one best solution come moment following assumes one axes present plot second axis must colorbar beeing present checking many axes find plot judge upon whether colorbar also mind user wish reference named objects outside makes much sense need use plt anyways hey question general much better solution would operate objects already present plot update new data thereby suppress need remove add axes find much cleaner faster solution update actually latter approach referencing objects outside even works together multiprocess approach desired questioner code updates figure without need delete colorbar code end shows timetable allows see multiprocessing indeed taken place one approach initially prior color bar drawn set variable method drawing color bar check see already drawn draw set variable true 
29    -------    self referential tables polymorphism sqlalchemy issues model right came across two questions helped lot stuck current code current error getting wrong thanks     ------   multiple self referential relationships sqlalchemy database model need one many relationship two one one relationships model made throwing errors get following error whenever try anything database really weird worked without next prev columns anybody know wrong use foreign keys topic old since confusing write need separate prev column already backref next also since multiple foreign keys target need specify primary joins manually pre class lang python prettyprint override class page base tablename pages id column integer primary key true title column string nullable false content column text nullable false parent id column integer foreignkey pages id nullable true parent relationship page pages c id pages c parent id remote side page id backref backref children next id column integer foreignkey pages id nullable true next relationship page pages c next id pages c id remote side page id backref backref prev false couple bugs bits weird behavior noticed use remote side page id remote side id remote side page id work sqlalchemy annoying pin seem like always use remote side primary key regardless actual remote side remote side pages next id always generate weird error even seems appropriate expression confusing hell use aliases actually correct way binding engine knows expression replace parameter way implicit zen btw 
