positive samples:
0    -------    parsing libclang unable parse certain tokens python windows code taken adapted uses libclang parse c sourcefiles python widnows get declaration statements seen following c source file test ok cpp parse method parses outputs however following c source file test cpp parsing incomplete parsing cannot handle lines vector numbers etc stops parsing part code believe issue similar one described another tried explicitly use std c parse argument success question even though solve problem use x c also suggested idea add code anyone point solution libclang parse c statements like ones test cpp also make continue parsing even though gets token cannot parse     ------   using libclang parse c python research questions ended exploring library order parse c source files python given c source trying identify tokens fac function name n variable name variable name mean variable name along ones position interested eventually tokenizing read useful articles well stack overflow questions however given new python struggling understand basics libclang would much appreciate example chunk code implements pick understand immediately obvious libclang api appropriate approach extracting token however rare would ever need want drop level cursor layer typically much useful however need minimal example might look something like version clang produces 
0    -------    using bisect list tuples compare using first value read use bisect list tuples used information answer works like generic solution since bisect allow specify key function want find first item x x tuples considering currently get correct result know greater bisect points index put instead would wrong integers could general case may floats without knowing max values nd element tried work tried worked feels like bad hack clean solutions     ------   using bisect list tuples trying figure use bisect list tuples example bisect list according tuple inserting bisect gives types int tuple cases simple enough none compare less integer give index first tuple starting least len list tuples smaller note list tuples sorted separate values separate lists note however bisect work data really ordered 
0    -------    python dict multiple keys hash trying understand python hash function hood created custom class instances return hash value assumed one instance class set time fact set multiple elements hash experimented little found override eq method instances class compare equal set allows one instance curious know dict multiple elements hash thanks note edited question give example dict instead set discussion answers dicts applies sets sets also multiple elements hash value     ------   putting two keys hash dict dict allow multiple slots occupied keys hash indexing manage resolve correct value complex literal indexing numbers compare equal equal int python mentioned states equality hashes imply equality objects python dictionaries contain number elements equal hashes long objects equal short answer question probably implementation complex type bit incomplete python library wim points comparing int complex using works fine comparing decimal complex since comparing one decimal one complex always return false types live dictionary python issue fixed python experimenting one decimal one complex equal running snippet dictionary contains value one complex key one decimal expected first key last value tl dr bug py complex type fixed py problem using decimal complex number float int etc work fine coerced comparison decimal lib comparing complex number handled specifically python function implementation len set decimal j decimal compared int first change ordering get different output also using literal better order insert matches docs last value using literal set 
0    -------    sorting list python list strings e g a txt a txt sort ascending order numbers list rather string e want a txt appear a txt since thanks     ------   way sorting python thank interest python example list folders example pattern n b de web de input rea de texto reading like windows explorer sort list lambda int x split directory number n would sort place lista sort lista key lambda x int x split sorted creates new list list sort sorts original list docs explains difference list sort sorted taken lambda expr lambda parameter list expression lambda expr lambda parameter list expression lambda expressions sometimes called lambda forms used create anonymous functions expression lambda arguments expression yields function object unnamed object behaves like function object defined simple example assuming item list starts number followed dot character sort list like lst original list 
0    -------    convert nested ordereddict dict nested ordereddict would like convert dict applying dict apparently converts outermost layer last entry output direct method convert occurences     ------   ordereddict vs dict python reasons use ordered dictionary says ordereddict subclass dict lot slower least doubles memory using plain dict going tried sample checks using ipython contradict earlier reasoning dict ordereddict size operating ordereddict takes easily around times time operating dict hence lot slower someone explain going wrong reasoning create large dict ordereddict compare sizes check time taken insertions using timeit think problem size due fact sizeof method defined python x l rel noreferrer implementation ordereddict simply falls back dict sizeof method prove created class extends list also added additional method foo check affects size still size returned sys course going slow methods running python list method run pure c seems fixed python well defined l rel noreferrer sizeof method 
0    -------    rgb hsv conversion using pil trying automate enhancement images transfered digital frame code place resizes adds date time least significant least details corner image pastes together pairs portrait images avoid displaying single portrait frame low resolution screen implemented brightness stretching filter pictures lighting good using rel noreferrer rgb hsv function calculate h v bands operating v one converting back rgb saving jpeg digital frame obviously conversion takes lot time even using rel noreferrer itertools tricks managed improve things using rel noreferrer psyco however noticed example pil rel noreferrer image convert rgb converted using matrix second argument convert method got wonder convert rgb hsv hsv back rgb using custom matrix convert method call minor rounding errors important case mind band expressed series integers thank advance     ------   detecting thresholds hsv color space rgb using python pil want take rgb image convert black white rgb image pixel black hsv value certain range white otherwise currently create new image create list new pixel values iterating data list form new image feels like much faster way e g point seems point get given pixels values instead point transform pixels ok work fixed overflow errors based wikipedia definition look get time definitely speedups maybe bugs please let know find cheers results starting get results hue value saturation edit returns results paul code gives hue saturation value looked results image format seem good sure reading question whether value v hsv interested bypass code select pixels based values set white black using something like 
0    -------    calculation hourly hour moving average different events pandas dataframe dataframe shown values obtained every minutes many events dataframe would like hour hour moving average event new dataframe possibly     ------   moving average pandas would like add moving average calculation exchange time series original data quandl exchange quandl get sek usd ca ac authtoken xxxxxxx calculating moving avarage pd rolling mean exchange would like add calculated moving average new column right value using index date preferably would also like rename calculated moving average case calculating one moving average aggregate average rolling mean returns series add new column dataframe described information rolling mean function deprecated pandas newer versions used new method example see quote pandas warning prior version pd rolling pd expanding pd module level functions deprecated replaced using rolling expanding objects corresponding method call 
0    -------    get mean across multiple pandas dataframes generating number dataframes shape want compare one another want able get mean median across dataframes want get mean two dataframes easiest way clarify want get mean particular cell indexes columns dataframes exactly example gave average source would     ------   compute average mean across dataframes python pandas list dataframes dataframe originally numerical data taken shaped identically rows columns first column index index index want compute average mean values single dataframe want export dataframe excel simplified version existing code however open excel file see looks like every dataframe copied sheet average mean values shown simplified example shown cutting rows dataframes looking something like also already seen answer possible looking clean solution one would simply involve looping dataframe value value suggestions suppose need mean rows column concatenating list data frames index add columns data frames right first data frame try appending data frames group take mean get desired result write file writing alternatively instead appending using loop also mention axis along want concatenate data frames case want concatenate along index axis put data data frames top top write file writing perhaps misunderstood asked solution simple need concat along correct axis dummy data df pd dataframe index range rows columns range columns data j j range columns range rows df df pd dataframe index range rows columns range columns data j j range columns range rows ps job op pd concat puts dataframes next eachother want groupby first need stack groupby stack df concat stack groupby level mean unstack puts dataframes top eachother need groupby index like df concat groupby level mean use context manager plain overwrite filepath 
0    -------    sort list datetime date objects sort list date datetime objects accepted answer working     ------   sort list date object sort list date object example unsorted list date objects get max min value list use list 
0    -------    fuzzy text search python wondering python library conduct fuzzy text search example three keywords letter stamp mail would like function check three words within paragraph certain distances one page addition words maintain order fine words appear three words tried solve problem another library whoosh looks powerful find proper function     ------   simple fuzzy string matching algorithm python trying find sort good fuzzy string matching algorithm direct matching work good unless strings similar match fails method work well strings works character level looking something along lines word level matching e g string quick brown fox string b quick brown fox jumped lazy dog match words string string b oversimplified example would anyone know good fuzzy string matching algorithm works word level take look python library open sourced yesterday obviously kinds problems context dependent might help like use find longest match pick minimum matching threshold example 
negative samples:
12    -------    capitalize words text file text file normal sentences actually hurry typing file capitalized first letter first word sentence per english grammar want would better word first letter capitalized something like word sentence capitalized point noted sentence capitalized actually want escape words equal less letters     ------   capitalize first letter word string python something easiest way str title rel noreferrer title method string either ascii unicode fine however look strings embedded apostrophes noted docs algorithm uses simple language independent definition word groups consecutive letters definition works many contexts means apostrophes contractions form word boundaries may desired result title method work well try string split argument words using str split capitalize word using str capitalize join capitalized words using str join optional second argument sep absent none runs whitespace characters replaced single space leading trailing whitespace removed otherwise sep used split join words 
11    -------    python function determine quarter year date sure could write go reinventing wheel function already     ------   python get first last day current calendar quarter built function get first last day current quarter bit long winded wondering succinct way accomplishing understand pandas function implement concise way edit please let know would better suited complicated way solves first case leaving last case exercise suggest keeping independent function clarity original version pretty strange happens arguments passed 
8    -------    extract day year julian day string date python string python need convert date object get integer value day year also julian day possible     ------   extract month julian day year python essentially opposite question string structured j january would december would essentially need know month given input string thought would relatively simple something like failed remember leap years often repeat anyone easy fix library sort thing unless missing something think need 
7    -------    json object must str response making request url returns json file attempting go data right error getting order avoid tried traverse response get error new python fully aware best way get json data parse suggestions sample data received status ok response meta time hits offset docs type material news pub date t document type article id c e d e lead paragraph country leader spoke progress nuclear weapons missile programs     ------   typeerror json object must str response python getting error figure problem code need load json manually response json method json loads r r str json loads know general case need pass string contains valid json json loads though often already python object sort usually contains attributes methods extract attributes internal representation handle python converting json convert python object make sense 
7    -------    read integers file bit little endian using python easy way read integers prefer built method assume possible bit operations cheers edit thought another way different ways opinion clearer pads zeros end shifts result required shifting fills whatever msb initially     ------   convert little endian bits file ascii array raw file containing lines html header followed data file encoded little endian bits signed want convert data integers ascii file use python tried unpack entire file following code found get error message edit seems better still get error message easy fix presume nice file process python python great processing text files reads big chunks internal buffer iterates lines cannot easily access binary data comes text read like additionally struct module support bits values way imagine read file one byte time first skip time end line read bytes time concatenate bytes byte string unpack possible code could remark code assumes description lines terminated end line true shown image let think last line case first count lines skip content last line 
6    -------    bubble sort homework class sorting algorithms although understand fine talking writing pseudocode problems writing actual code attempt python far tell sorts correctly finishes loops indefinitely code fixed function finishes properly correctly sorts list reasonable size p know really prints function return done yet code really work yet     ------   sort dictionaries python using bubble sort current algorithm sorting dictionary wont work compare elements wrong made changes code instead j index profiles need actual value profiles key dictionary using bubble j j considering values ranging len profiles makes miss last value considered values ranging len profiles used bubble j j complete code hope works output follows two lines wrong using indexes j range rather profile keys stored indexes stops working always comparing elements regardless swapping result running first pass top v v mistaken values bottom ones correct values also swap python better algorithm using standard methods 
6    -------    find groups subsets set set partitions python want find algorithm given set find groups subsets satisfy following condition x z x z group x group x x x group x note hope define well good math symbols made following approach search groups two subsets get following output groups composed two subsets groups composed one three four subsets question may find general solution example following expected output     ------   find subsets set exactly n elements writing program python realized problem need solve requires given set n elements n test function possible subsets certain order e number elements use answer produce partial solution try next order n way write solution form knowing python expected solution already best way accomplish friend python greater otherwise check link implementation equivalent function using canonical function get page used like map sets want use union intersection etc 
6    -------    typeerror expected character buffer object trying save integer textfile trying make simple counter supposed keep track many times program executed first textfile includes one character open file parse int add value try return textfile like overwrite value textfile close get typeerror expected character buffer object edit trying parse string gives     ------   typeerror expected character buffer object running following error writing value file please help figure issue fix error assuming want write string file change row issue f write str row 
5    -------    apscheduler starting would like run python script night thinking using apscheduler start running am following night run every night scheduler script looks like scheduler py shell python py disown running remotely want run background disown immediately number pid appears line every python script would ps e grep python number tried kill pid got message saying job exist scheduler running yes stop wrong     ------   make apscheduler run background web app flask web app shows information rss feed want process rss feed regularly e g every minutes extract information store sqlite db figure schedule function certain intervals used apscheduler code following run py function app run debug true starts flask web app problem code never reaches app run possible spawn another process handle spider main call run process background use another approach nb know could use flask celery small app seems heavyweight need time sleep run spider main starts scheduler puts process sleep seconds run next line app run start hours spider main started spider look like 
5    -------    porting aes decryption cryptojs pycrypto javascript part decodes string aes encryption trying code similar decoding function python importing aes could anyone help one figure equivalent code js python looked page sure code similar js python means tried something like another source     ------   python encrypting pycrypto aes found pycrypto today working aes encryption class unfortunately half works self h md outputs md hash hex format byte output seems decrypt message puts random characters decryption case n n n think problem block size self data anyone know fix macbook pro test jan bin python data py b jf n n n n n n n n n n honest characters n n n n n n n n n n look random using aes cbc mode requires length plaintext ciphertext always multiple bytes code show actually see exception raised data passed encrypt fulfill condition looks like added enough new line characters n whatever input plaintext happened aligned apart two common ways solve alignment issue switch cbc aes mode cbc cfb aes mode cfb default segment size used pycrypto restriction plaintext ciphertext lengths keep cbc use padding scheme like pkcs encrypting plaintext x bytes append back many bytes need reach next byte boundary padding bytes value number bytes adding python style python would decrypting remove back plaintext many bytes indicated padding even though understand case class exercise would like point insecure send data without form authentication e g mac 
